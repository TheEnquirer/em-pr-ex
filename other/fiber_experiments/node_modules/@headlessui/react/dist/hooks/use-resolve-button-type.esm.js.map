{"version":3,"file":"use-resolve-button-type.esm.js","sources":["../../src/hooks/use-resolve-button-type.ts"],"sourcesContent":["import { useState, MutableRefObject } from 'react'\n\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nfunction resolveType<TTag>(props: { type?: string; as?: TTag }) {\n  if (props.type) return props.type\n\n  let tag = props.as ?? 'button'\n  if (typeof tag === 'string' && tag.toLowerCase() === 'button') return 'button'\n\n  return undefined\n}\n\nexport function useResolveButtonType<TTag>(\n  props: { type?: string; as?: TTag },\n  ref: MutableRefObject<HTMLElement | null>\n) {\n  let [type, setType] = useState(() => resolveType(props))\n\n  useIsoMorphicEffect(() => {\n    setType(resolveType(props))\n  }, [props.type, props.as])\n\n  useIsoMorphicEffect(() => {\n    if (type) return\n    if (!ref.current) return\n\n    if (ref.current instanceof HTMLButtonElement && !ref.current.hasAttribute('type')) {\n      setType('button')\n    }\n  }, [type, ref])\n\n  return type\n}\n"],"names":["resolveType","props","type","tag","as","toLowerCase","undefined","useResolveButtonType","ref","useState","setType","useIsoMorphicEffect","current","HTMLButtonElement","hasAttribute"],"mappings":";;;AAIA,SAASA,WAAT,CAA2BC,KAA3B;;;AACE,MAAIA,KAAK,CAACC,IAAV,EAAgB,OAAOD,KAAK,CAACC,IAAb;AAEhB,MAAIC,GAAG,gBAAGF,KAAK,CAACG,EAAT,wBAAe,QAAtB;AACA,MAAI,OAAOD,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACE,WAAJ,OAAsB,QAArD,EAA+D,OAAO,QAAP;AAE/D,SAAOC,SAAP;AACD;;SAEeC,qBACdN,OACAO;kBAEsBC,QAAQ,CAAC;AAAA,WAAMT,WAAW,CAACC,KAAD,CAAjB;AAAA,GAAD;MAAzBC;MAAMQ;;AAEXC,EAAAA,mBAAmB,CAAC;AAClBD,IAAAA,OAAO,CAACV,WAAW,CAACC,KAAD,CAAZ,CAAP;AACD,GAFkB,EAEhB,CAACA,KAAK,CAACC,IAAP,EAAaD,KAAK,CAACG,EAAnB,CAFgB,CAAnB;AAIAO,EAAAA,mBAAmB,CAAC;AAClB,QAAIT,IAAJ,EAAU;AACV,QAAI,CAACM,GAAG,CAACI,OAAT,EAAkB;;AAElB,QAAIJ,GAAG,CAACI,OAAJ,YAAuBC,iBAAvB,IAA4C,CAACL,GAAG,CAACI,OAAJ,CAAYE,YAAZ,CAAyB,MAAzB,CAAjD,EAAmF;AACjFJ,MAAAA,OAAO,CAAC,QAAD,CAAP;AACD;AACF,GAPkB,EAOhB,CAACR,IAAD,EAAOM,GAAP,CAPgB,CAAnB;AASA,SAAON,IAAP;AACD;;;;"}