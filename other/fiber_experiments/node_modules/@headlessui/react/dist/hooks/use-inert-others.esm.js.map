{"version":3,"file":"use-inert-others.esm.js","sources":["../../src/hooks/use-inert-others.ts"],"sourcesContent":["import { MutableRefObject } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nlet interactables = new Set<HTMLElement>()\nlet originals = new Map<HTMLElement, { 'aria-hidden': string | null; inert: boolean }>()\n\nfunction inert(element: HTMLElement) {\n  element.setAttribute('aria-hidden', 'true')\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = true\n}\n\nfunction restore(element: HTMLElement) {\n  let original = originals.get(element)\n  if (!original) return\n\n  if (original['aria-hidden'] === null) element.removeAttribute('aria-hidden')\n  else element.setAttribute('aria-hidden', original['aria-hidden'])\n  // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n  element.inert = original.inert\n}\n\nexport function useInertOthers<TElement extends HTMLElement>(\n  container: MutableRefObject<TElement | null>,\n  enabled: boolean = true\n) {\n  useIsoMorphicEffect(() => {\n    if (!enabled) return\n    if (!container.current) return\n\n    let element = container.current\n\n    // Mark myself as an interactable element\n    interactables.add(element)\n\n    // Restore elements that now contain an interactable child\n    for (let original of originals.keys()) {\n      if (original.contains(element)) {\n        restore(original)\n        originals.delete(original)\n      }\n    }\n\n    // Collect direct children of the body\n    document.querySelectorAll('body > *').forEach(child => {\n      if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n      // Skip the interactables, and the parents of the interactables\n      for (let interactable of interactables) {\n        if (child.contains(interactable)) return\n      }\n\n      // Keep track of the elements\n      if (interactables.size === 1) {\n        originals.set(child, {\n          'aria-hidden': child.getAttribute('aria-hidden'),\n          // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n          inert: child.inert,\n        })\n\n        // Mutate the element\n        inert(child)\n      }\n    })\n\n    return () => {\n      // Inert is disabled on the current element\n      interactables.delete(element)\n\n      // We still have interactable elements, therefore this one and its parent\n      // will become inert as well.\n      if (interactables.size > 0) {\n        // Collect direct children of the body\n        document.querySelectorAll('body > *').forEach(child => {\n          if (!(child instanceof HTMLElement)) return // Skip non-HTMLElements\n\n          // Skip already inert parents\n          if (originals.has(child)) return\n\n          // Skip the interactables, and the parents of the interactables\n          for (let interactable of interactables) {\n            if (child.contains(interactable)) return\n          }\n\n          originals.set(child, {\n            'aria-hidden': child.getAttribute('aria-hidden'),\n            // @ts-expect-error `inert` does not exist on HTMLElement (yet!)\n            inert: child.inert,\n          })\n\n          // Mutate the element\n          inert(child)\n        })\n      } else {\n        for (let element of originals.keys()) {\n          // Restore\n          restore(element)\n\n          // Cleanup\n          originals.delete(element)\n        }\n      }\n    }\n  }, [enabled])\n}\n"],"names":["interactables","Set","originals","Map","inert","element","setAttribute","restore","original","get","removeAttribute","useInertOthers","container","enabled","useIsoMorphicEffect","current","add","keys","contains","document","querySelectorAll","forEach","child","HTMLElement","interactable","size","set","getAttribute","has"],"mappings":"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"}